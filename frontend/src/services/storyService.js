import apiService from './api';

class StoryService {
  /**
   * Generate a story based on the provided prompt
   * @param {Object} params - Story generation parameters
   * @param {string} params.prompt - The story prompt
   * @param {string} [params.style="reddit"] - Story style (reddit, creative)
   * @param {string} [params.length="medium"] - Story length (short, medium, long)
   * @returns {Promise<Object>} Generated story with title, content, and tags
   */
  async generateStory({ prompt, style = "reddit", length = "medium" }) {
    try {
      const response = await apiService.post('/api/story/generate', {
        prompt,
        style,
        length
      });
      
      return response;
    } catch (error) {
      console.warn('Story generation failed, using mock data:', error.message);
      
      // Return mock data when backend is unavailable
      const mockData = apiService.getMockData('story');
      return {
        ...mockData,
        title: `Mock Story: ${prompt.substring(0, 30)}...`,
        content: `This is a mock story generated for testing purposes. The original prompt was: "${prompt}". Style: ${style}, Length: ${length}. In a real implementation, this would be generated by OpenAI's GPT model with proper storytelling, character development, and engaging narrative structure.`,
        tags: ["mock", "test", style, length, "story"]
      };
    }
  }

  /**
   * Save a story to the user's projects (if backend supports it)
   * @param {Object} story - Story object to save
   * @returns {Promise<Object>} Saved story data
   */
  async saveStory(story) {
    try {
      const response = await apiService.post('/api/story/save', story);
      return response;
    } catch (error) {
      console.warn('Story save failed:', error.message);
      // Return mock success response
      return {
        id: `mock-${Date.now()}`,
        ...story,
        saved: true,
        message: 'Story saved (mock)'
      };
    }
  }

  /**
   * Get user's saved stories (if backend supports it)
   * @returns {Promise<Array>} Array of saved stories
   */
  async getSavedStories() {
    try {
      const response = await apiService.get('/api/story/saved');
      return response;
    } catch (error) {
      console.warn('Failed to fetch saved stories, using mock data:', error.message);
      // Return mock saved stories
      return [
        {
          id: 'mock-1',
          title: 'Sample Saved Story',
          content: 'This is a sample saved story for demonstration purposes.',
          tags: ['sample', 'demo'],
          createdAt: new Date().toISOString()
        }
      ];
    }
  }

  /**
   * Delete a saved story (if backend supports it)
   * @param {string} storyId - ID of the story to delete
   * @returns {Promise<Object>} Deletion confirmation
   */
  async deleteStory(storyId) {
    try {
      const response = await apiService.delete(`/api/story/${storyId}`);
      return response;
    } catch (error) {
      console.warn('Story deletion failed:', error.message);
      // Return mock success response
      return {
        success: true,
        message: 'Story deleted (mock)',
        id: storyId
      };
    }
  }
}

// Create and export a singleton instance
const storyService = new StoryService();
export default storyService;
